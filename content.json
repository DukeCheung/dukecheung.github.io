{"meta":{"title":"Duke","subtitle":"学海无涯","description":null,"author":"ZhangXing","url":"http://chaunceyzhangx.github.io"},"pages":[{"title":"Categories","date":"2018-03-27T11:41:53.033Z","updated":"2018-03-11T05:45:56.000Z","comments":true,"path":"categories/index.html","permalink":"http://chaunceyzhangx.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2018-03-28T04:52:15.591Z","updated":"2018-03-28T04:52:15.591Z","comments":true,"path":"about/index.html","permalink":"http://chaunceyzhangx.github.io/about/index.html","excerpt":"","text":"Email: dukestar@qq.com"},{"title":"Tags","date":"2018-03-27T13:35:28.302Z","updated":"2018-03-27T13:35:28.302Z","comments":true,"path":"tags/index.html","permalink":"http://chaunceyzhangx.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Unity 3D 牧师与魔鬼场景改进版","slug":"Unity 3D牧师与魔鬼场景改进版","date":"2018-04-10T14:17:00.000Z","updated":"2018-04-10T15:58:20.071Z","comments":true,"path":"2018/04/10/Unity 3D牧师与魔鬼场景改进版/","link":"","permalink":"http://chaunceyzhangx.github.io/2018/04/10/Unity 3D牧师与魔鬼场景改进版/","excerpt":"场景改进效果图： Skybox ： 天空盒，即天空场景，添加后可看到不同的天空场景。","text":"场景改进效果图： Skybox ： 天空盒，即天空场景，添加后可看到不同的天空场景。 首先，在Unity的 Assets Store 中搜索 Skybox ，下载资源，主要为六张图片。之后新建Material，Inspector—-&gt;Shader—-&gt;Skybox，拖入六张图片，即制作好了一个材料。 下一步为摄像机添加组件，Add Component—-&gt;Rendering—-&gt;Skybox，拖入上一部创建好的图片就OK啦。 摄像机 ： 打开Camera的Inspector视图，可看到Projection属性： 有两个选项：Perspective(透视视图) ，和 Orthographic(正交视图) 。正交视图与摄像机距离无关，实现2D投影效果，透视试图则是属于3D效果。 设置两个摄像机，一个为主，采用透视视图，另一为辅，为正交视图。 需注意的重点是，若要使辅助摄像机位于视图左下角，则需调整 Depth 和视图大小，确保辅助摄像机的深度大于主摄像机。 _地形_ ： Create—-&gt;3D Object—-&gt;Terrain，即可创建地形对象： 可用来改造地形，种树，花草等等，不过若要种树，则需从 Assets Store 中下载相关资源，从中找到树木的预制，即可应用于地形中。 _海水_ ： Assets—-&gt;Import Package—-&gt;Environment，即可从该资源包中找到 Water 预制，拖入场景中，调整位置即可实现海水效果。 牧师与魔鬼详见代码","categories":[{"name":"3D Game","slug":"3D-Game","permalink":"http://chaunceyzhangx.github.io/categories/3D-Game/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://chaunceyzhangx.github.io/tags/博客/"}]},{"title":"Unity 3D 基础概念","slug":"Unity 3D之Homework1","date":"2018-03-27T11:54:00.000Z","updated":"2018-04-10T15:57:08.695Z","comments":true,"path":"2018/03/27/Unity 3D之Homework1/","link":"","permalink":"http://chaunceyzhangx.github.io/2018/03/27/Unity 3D之Homework1/","excerpt":"基础概念 GameObjects: 游戏对象，即游戏中的最基本单位，游戏中的每一个对象都是游戏对象。它相当于一个容器，本身并无太多属性，需添加各种组件，资源后才能达到设计者的所希望的游戏行为目的。","text":"基础概念 GameObjects: 游戏对象，即游戏中的最基本单位，游戏中的每一个对象都是游戏对象。它相当于一个容器，本身并无太多属性，需添加各种组件，资源后才能达到设计者的所希望的游戏行为目的。 Assets: 指可应用于Unity上的各种资源，为游戏添加各种属性，从而实现目标效果；同时，一个Unity Project的Assets文件夹指存储于本地计算机中的各种图片，预制，script等文件的总和。一个Assets中可以包含多个GameObject，GameObject从逻辑上讲存储于Assets文件夹中。 游戏结构目录：Assets Scene 保存游戏场景 Game 保存美术资源 Materials 保存材质球，用于调整颜色等 Prefabs 保存预制，即游戏对象的模板，方便克隆 Model _模型_ Animations 保存动画文件 Audio 音频文件 Textures 贴图文件 UI UI文件 Scripts 脚本文件 Plugins _插件_ Editor 保存编辑器类文件 MonoBehaviour 基本行为触发条件：代码如下： 1234567891011121314151617181920212223242526272829303132// Use this for initializationvoid Start () &#123; Debug.Log(&quot;init Start&quot;);&#125;// Update is called once per framevoid Update () &#123; Debug.Log(&quot;init Update&quot;);&#125;void Awake()&#123; Debug.Log(&quot;init Awake&quot;);&#125;void FixedUpdate()&#123; Debug.Log(&quot;init FixedUpdate&quot;);&#125;void LateUpdate()&#123; Debug.Log(&quot;init LateUpdate&quot;);&#125;void OnGUI()&#123; Debug.Log(&quot;init OnGUI&quot;);&#125;void OnDisable()&#123; Debug.Log(&quot;init OnDisable&quot;);&#125;void OnEnable()&#123; Debug.Log(&quot;init OnEnable&quot;);&#125; Start: Per frame: End: 结论: Awake(): 当脚本实例被载入时调用； Start(): 在Update()前被调用一次； Update(): 行为启用时，每一帧被调用一次； FixedUpdate(): 行为启用时，每一时间片被调用； LateUpdate(): 行为启用时，Update()之后被调用； OnGUI(): 每帧调用多次，响应GUI事件； OnEnable(): 当对象变为启用并激活时，调用该函数； OnDisable(): 当对象变为禁用或不活动时，调用该函数。 简单介绍GameObject, Transform 和 Component，并画出三者的UML图。 GameObject: Unity 场景中所有实体的基类。 Transform: 一个对象的位置，旋转和大小。 Component: 所有附加到游戏对象的属性的基类。 UML 简单代码 查找对象新建项目，其中有 Sphere 游戏对象，代码如下： 1234567891011121314151617void Start() &#123; Debug.Log(&quot;init start&quot;); &#125; void FixedUpdate() &#123; var x = GameObject.Find(&quot;Sphere&quot;); if (x.name != null) &#123; Debug.Log(&quot;find the gameobject&quot;); &#125; else &#123; Debug.Log(&quot;Not found&quot;); &#125; &#125; 添加子对象代码如下： 1234567void Start()&#123; GameObject sph = GameObject.Find(&quot;Sphere&quot;); GameObject child = GameObject.CreatePrimitive(PrimitiveType.Cube); child.transform.parent = sph.transform; Debug.Log(&quot;Success&quot;);&#125; 遍历对象树代码如下： 123456789GameObject obj = GameObject.Find(&quot;Sphere&quot;);print(&quot;父对象名称为:&quot; + obj.name + &quot; 有&quot; + obj.transform.childCount + &quot;个子对象&quot;);int i = 0;while (i &lt; obj.transform.childCount)&#123; Transform child = obj.transform.GetChild(i); print(&quot;这是第: &quot; + i + &quot; 个子对象, 名称为: &quot; + child.name); i++;&#125; 清除所有子对象代码如下： 1234567891011GameObject obj = GameObject.Find(&quot;Sphere&quot;);print(&quot;父对象名称为:&quot; + obj.name + &quot; 有&quot; + obj.transform.childCount + &quot;个子对象&quot;);int i = 0;while (i &lt; obj.transform.childCount)&#123; Transform child = obj.transform.GetChild(i); print(&quot;这是第: &quot; + i+1 + &quot; 个子对象, 名称为: &quot; + child.name); GameObject pchild = GameObject.Find(child.name); GameObject.Destroy(pchild); i++;&#125; 预设与对象克隆 Prefabs: 预制可以存储一个带有组件和属性的 GameObject 作为模板，当想创建新的实例时，可以直接拖动模板进行创建。对预制做的修改可以应用到由该模板生成的所有实例中，也可以单独编辑每一个实例。 总的来说，预设和对象克隆都能生成新的对象实例，但相比较而言，由 clone 生成的实例，编辑原对象时，就不能应用到所有实例中。 预制 table : 12345public GameObject prefab;void Start()&#123; Instantiate(prefab, new Vector3(2.0F, 0, 0), Quaternion.identity);&#125; 组合模式 组合模式: 定义：组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对组合对象和单个对象的使用具有一致性。 包含三个部分：抽象构件，叶子构件和容器构件。 目的即是使得对根节点的调用方法对叶子节点同样适用，使得工作效率更高。 代码：​ 有三种发送消息的函数，其中BroadcastMessage()由父类发送给子类，括号里面：第一个参数为回应的函数，第二个参数为传递给回应函数的参数。 1234567void Start () &#123; gameObject.BroadcastMessage(&quot;MySon&quot;,&quot;I am your father&quot;);&#125;void MySon(string ss)&#123; Debug.Log(&quot;I am your son&quot;);&#125;","categories":[{"name":"3D Game","slug":"3D-Game","permalink":"http://chaunceyzhangx.github.io/categories/3D-Game/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://chaunceyzhangx.github.io/tags/博客/"}]}]}